#!/bin/bash

function init_module() {
    GTK_ENABLE_DEFAULT="true"
    GTK_ENABLE="$(crudini --get ${GCS_CONFIG_FILE} gtk enable 2>/dev/null || echo "${GTK_ENABLE_DEFAULT}")"

    GTK_GSETTINGS_PATH="org.gnome.desktop.interface"
}



function check_dependencies() {
    if ! which oomox-cli >/dev/null; then
        printf "* Ignoring colors and icon theme for GTK+ (oomox not installed).\n"
        return 1

    elif ! [ "${GTK_ENABLE}" == "true" ]; then
        printf "* Ignoring colors and icon theme for GTK+ (disabled from configuration).\n"
        return 1

    else
        return 0

    fi
}



function derive_colors() {
    : ${gtk_base_color:=${base_color}}
    : ${gtk_text_color:=${text_color}}
    : ${gtk_bg_color:=${bg_color}}
    : ${gtk_fg_color:=${fg_color}}
    : ${gtk_menu_bg_color:=${bg_color}}
    : ${gtk_menu_fg_color:=${fg_color}}
    : ${gtk_selected_bg_color:=${selected_bg_color}}
    : ${gtk_selected_fg_color:=${selected_fg_color}}
    : ${gtk_button_bg_color:=${bg_color}}
    : ${gtk_button_fg_color:=${fg_color}}
    : ${gtk_header_button_bg_color:=${bg_color}}
    : ${gtk_header_button_fg_color:=${fg_color}}
    : ${gtk_selected_tab_color:=${selected_bg_color}}
    : ${gtk_tooltip_fg_color:=${tooltip_fg_color}}
    : ${gtk_tooltip_border_color:=${tooltip_border_color}}
    : ${gtk_tooltip_bg_color:=${tooltip_bg_color}}

    : ${unity_titlebar_focused_bg_color:=${titlebar_focused_bg_color}}
    : ${unity_titlebar_focused_fg_color:=${titlebar_focused_fg_color}}
    : ${unity_titlebar_unfocused_bg_color:=${titlebar_unfocused_bg_color}}
    : ${unity_titlebar_unfocused_fg_color:=${titlebar_unfocused_fg_color}}
    : ${unity_titlebar_button_hover_original:=#f0544c}
    : ${unity_titlebar_button_hover:=$(mix_hex_colors "${titlebar_focused_fg_color}" "${titlebar_focused_bg_color}" 0.5)}
    : ${unity_titlebar_button_pressed_original:=#f0544c}
    : ${unity_titlebar_button_pressed:=$(mix_hex_colors "${titlebar_focused_fg_color}" "${titlebar_focused_bg_color}" 0.25)}

    : ${gtk_icon_theme_name:=${icon_theme_name}}

    gtk_roundness=$(crudini --get ${GCS_CONFIG_FILE} gtk roundness 2>/dev/null || echo 3)
    gtk_spacing=$(crudini   --get ${GCS_CONFIG_FILE} gtk spacing   2>/dev/null || echo 3)
    gtk_gradient=$(crudini  --get ${GCS_CONFIG_FILE} gtk gradient  2>/dev/null || echo 0.14)
}



function create_backup() {
    printf "* Making backup of colors and icon theme for GTK+..."

    local GTK_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/gtk"
    mkdir -p "${GTK_BACKUP_DIR}"

    if ps -e | grep xsettingsd >/dev/null; then
        dump_xsettings | awk '/Net\/ThemeName/{print $2}'     > "${GTK_BACKUP_DIR}/ThemeName"
        dump_xsettings | awk '/Net\/IconThemeName/{print $2}' > "${GTK_BACKUP_DIR}/IconThemeName"
        printf " done.\n"

    elif ps ax | grep -E "(gnome-settings-daemon|gsd-xsettings|gnome-session-binary)" >/dev/null; then
        gsettings get "${GTK_GSETTINGS_PATH}" gtk-theme  > ""
        gsettings get "${GTK_GSETTINGS_PATH}" gtk-theme  > "${GTK_BACKUP_DIR}/ThemeName"
        gsettings get "${GTK_GSETTINGS_PATH}" icon-theme > "${GTK_BACKUP_DIR}/IconThemeName"
        printf " done.\n"

    else
        printf " no supported XSettings manager found!\n"
        # TODO: configure theme/colors with .gtkrc-2.0 and .config/gtk-3.0/settings.ini
    fi
}



function restore_backup() {
    printf "* Restoring backup of colors and icon theme for GTK+...\n"

    local GTK_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/gtk"

    if ps -e | grep xsettingsd >/dev/null; then

        local GTK_XSETTINGSD_RESTART_COMMAND=$(crudini --get ${GCS_CONFIG_FILE} gtk xsettingsd_restart_command 2>/dev/null || echo )
        local GTK_XSETTINGSD_CONFIG_FILE=$(crudini --get ${GCS_CONFIG_FILE} gtk xsettingsd_config_file 2>/dev/null || echo "${HOME}/.xsettingsd")

        printf "  colors..."
        if [ -f "${GTK_BACKUP_DIR}/ThemeName" ]; then
            set_value "Net\/ThemeName" " " "$(cat "${GTK_BACKUP_DIR}/ThemeName")" "${GTK_XSETTINGSD_CONFIG_FILE}"
            printf " done.\n"
        else
            printf " not found!\n"
        fi

        printf "  icon theme..."
        if [ -f "${GTK_BACKUP_DIR}/IconThemeName" ]; then
            set_value "Net\/IconThemeName" " " "$(cat "${GTK_BACKUP_DIR}/IconThemeName")" "${GTK_XSETTINGSD_CONFIG_FILE}"
            printf " done.\n"
        else
            printf " not found!\n"
        fi

    elif ps ax | grep -E "(gnome-settings-daemon|gsd-xsettings|gnome-session-binary)" >/dev/null; then

        printf "  colors..."
        if [ -f "${GTK_BACKUP_DIR}/ThemeName" ]; then
            gsettings set "${GTK_GSETTINGS_PATH}" gtk-theme $(cat "${GTK_BACKUP_DIR}/ThemeName")
            printf " done.\n"
        else
            printf " not found!\n"
        fi

        printf "  icon theme..."
        if [ -f "${GTK_BACKUP_DIR}/IconThemeName" ]; then
            gsettings set "${GTK_GSETTINGS_PATH}" icon-theme $(cat "${GTK_BACKUP_DIR}/IconThemeName")
            printf " done.\n"
        else
            printf " not found!\n"
        fi

    fi
}



function dry_run() {
    printf "* GTK+: create a new theme with oomox and apply it via GSettings or XSettingsd. Optionally set icon theme.\n"
}



function print_module_help() {
    echo "Help for GCS ${BASH_SOURCE##*/} module"
    echo
    echo "This module sets colors for GTK+2 and GTK+3 themes. This is accomplished by generating new numix-based themes with the desired colors using oomox. The themes are applied using GSettings or XSettingsd."
    echo
    echo "Additional modifications are made to style titlebars and buttons in the Unity desktop environment."
    echo
    echo "This module can also configure the GTK+ icon theme."
    echo
    echo "Backup and restore are supported."
    echo
}



function apply_theme() {
    printf "* Setting colors and icon theme for GTK+...\n"

    local GTK_TMP_DIR="${GCS_TMP_DIR}/gtk"
    mkdir "${GTK_TMP_DIR}"

    local GTK_OOMOX_THEME="${GTK_TMP_DIR}/oomox-theme"
    local GTK_OUTPUT_THEME_DIR="${HOME}/.themes/${FULL_COLOR_THEME_NAME}"

    echo "NAME=${FULL_COLOR_THEME_NAME}"               > "${GTK_OOMOX_THEME}"
    echo "BG=${gtk_bg_color:1}"                       >> "${GTK_OOMOX_THEME}"
    echo "FG=${gtk_fg_color:1}"                       >> "${GTK_OOMOX_THEME}"
    echo "MENU_BG=${gtk_menu_bg_color:1}"             >> "${GTK_OOMOX_THEME}"
    echo "MENU_FG=${gtk_menu_fg_color:1}"             >> "${GTK_OOMOX_THEME}"
    echo "SEL_BG=${gtk_selected_bg_color:1}"          >> "${GTK_OOMOX_THEME}"
    echo "SEL_FG=${gtk_selected_fg_color:1}"          >> "${GTK_OOMOX_THEME}"
    echo "TXT_BG=${gtk_base_color:1}"                 >> "${GTK_OOMOX_THEME}"
    echo "TXT_FG=${gtk_text_color:1}"                 >> "${GTK_OOMOX_THEME}"
    echo "BTN_BG=${gtk_button_bg_color:1}"            >> "${GTK_OOMOX_THEME}"
    echo "BTN_FG=${gtk_button_fg_color:1}"            >> "${GTK_OOMOX_THEME}"
    echo "HDR_BTN_BG=${gtk_header_button_bg_color:1}" >> "${GTK_OOMOX_THEME}"
    echo "HDR_BTN_FG=${gtk_header_button_fg_color:1}" >> "${GTK_OOMOX_THEME}"
    echo "GTK3_GENERATE_DARK=False"                   >> "${GTK_OOMOX_THEME}"
    echo "ROUNDNESS=${gtk_roundness}"                 >> "${GTK_OOMOX_THEME}"
    echo "SPACING=${gtk_spacing}"                     >> "${GTK_OOMOX_THEME}"
    echo "GRADIENT=${gtk_gradient}"                   >> "${GTK_OOMOX_THEME}"

    oomox-cli -o "${FULL_COLOR_THEME_NAME}" "${GTK_OOMOX_THEME}" >/dev/null 2>/dev/null


    local GTK_UNITY_DECORATION_SNIPPET="${GTK_TMP_DIR}/gtk_unity_decoration_snippet.css"
    echo "
UnityDecoration.top {
  background-image: none;
  background-color: ${unity_titlebar_focused_bg_color};
  border-color: ${unity_titlebar_focused_bg_color};
  color: ${unity_titlebar_focused_fg_color};
}
UnityDecoration.top:backdrop {
  background-image: none;
  background-color: ${unity_titlebar_unfocused_bg_color};
  border-color: ${unity_titlebar_unfocused_bg_color};
  color: ${unity_titlebar_unfocused_fg_color};
}
UnityDecoration.left, UnityDecoration.right, UnityDecoration.bottom {
  background-image: none;
  background-color: ${unity_titlebar_focused_bg_color};
}
UnityDecoration.left:backdrop, UnityDecoration.right:backdrop, UnityDecoration.bottom:backdrop {
  background-image: none;
  background-color: ${unity_titlebar_unfocused_bg_color};
}
" > "${GTK_UNITY_DECORATION_SNIPPET}"
    cat "${GTK_UNITY_DECORATION_SNIPPET}" >> "${GTK_OUTPUT_THEME_DIR}/gtk-3.0/gtk.css"
    cat "${GTK_UNITY_DECORATION_SNIPPET}" >> "${GTK_OUTPUT_THEME_DIR}/gtk-3.20/gtk.css"

    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/close_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/close_dash_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/close_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/close_unfocused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/maximize_dash_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/maximize_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/maximize_unfocused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/minimize_dash_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/minimize_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/minimize_unfocused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/sheet_style_close_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/unmaximize_dash_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/unmaximize_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${GTK_OUTPUT_THEME_DIR}/unity/unmaximize_unfocused_prelight.svg"

    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/close_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/close_dash_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/close_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/close_unfocused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/maximize_dash_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/maximize_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/maximize_unfocused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/minimize_dash_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/minimize_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/minimize_unfocused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/sheet_style_close_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/unmaximize_dash_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/unmaximize_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${GTK_OUTPUT_THEME_DIR}/unity/unmaximize_unfocused_pressed.svg"


    sed -i "s/style \"clearlooks-notebook-bg\" {/style \"clearlooks-notebook-bg\" {\n\tbg[SELECTED] = \"${gtk_selected_tab_color}\"/" "${GTK_OUTPUT_THEME_DIR}/gtk-2.0/gtkrc"

    local GTK3_TABS_SNIPPET="${GTK_TMP_DIR}/gtk3-tabs-snippet"
    echo "
.notebook tab.top:active {
  border-top-color: ${gtk_selected_tab_color};
}
.notebook tab.right:active {
  border-right-color: ${gtk_selected_tab_color};
}
.notebook tab.bottom:active {
  border-bottom-color: ${gtk_selected_tab_color};
}
.notebook tab.left:active {
  border-left-color: ${gtk_selected_tab_color};
}
" > "${GTK3_TABS_SNIPPET}"
    cat "${GTK3_TABS_SNIPPET}" >> "${GTK_OUTPUT_THEME_DIR}/gtk-3.0/gtk.css"

    local GTK3_20_TABS_SNIPPET="${GTK_TMP_DIR}/gtk3.20-tabs-snippet"
    echo "
notebook > header.top > tabs > tab:checked {
  border-top-color: ${gtk_selected_tab_color};
}       
notebook > header.bottom > tabs > tab:checked {
  border-bottom-color: ${gtk_selected_tab_color};
}
notebook > header.right > tabs > tab:checked {
  border-right-color: ${gtk_selected_tab_color};
}
notebook > header.left > tabs > tab:checked {
  border-left-color: ${gtk_selected_tab_color};
}
notebook > header > tabs > tab button.flat:active, notebook > header > tabs > tab button.flat:active:hover {
  color: ${gtk_selected_tab_color};
}
" > "${GTK3_20_TABS_SNIPPET}"
    cat "${GTK3_20_TABS_SNIPPET}" >> "${GTK_OUTPUT_THEME_DIR}/gtk-3.20/gtk.css"



    sed -i "s/tooltip_fg_color\:[^n]*n/tooltip_fg_color:${gtk_tooltip_fg_color}\\\n/g" "${GTK_OUTPUT_THEME_DIR}/gtk-2.0/gtkrc"
    sed -i "s/tooltip_bg_color\:[^n]*n/tooltip_bg_color:${gtk_tooltip_bg_color}\\\n/g" "${GTK_OUTPUT_THEME_DIR}/gtk-2.0/gtkrc"

    local GTK3_TOOLTIP_SNIPPET="${GTK_TMP_DIR}/gtk3-tooltip-snippet"
    echo "
.tooltip.background {
  background-color: ${gtk_tooltip_bg_color};
  background-image: none;
  color: ${gtk_tooltip_fg_color}; }
" > "${GTK3_TOOLTIP_SNIPPET}"
    cat "${GTK3_TOOLTIP_SNIPPET}" >> "${GTK_OUTPUT_THEME_DIR}/gtk-3.0/gtk.css"

    local GTK3_20_TOOLTIP_SNIPPET="${GTK_TMP_DIR}/gtk3.20-tooltip-temp"
    echo "
.tooltip.background, .tooltip.background.csd, tooltip.background, tooltip.background.csd {
  background-color: ${gtk_tooltip_bg_color};
  border: 1px solid $ ${gtk_tooltip_border_color};
  color: ${gtk_tooltip_fg_color};
}
" > "${GTK3_20_TOOLTIP_SNIPPET}"
    cat "${GTK3_20_TOOLTIP_SNIPPET}" >> "${GTK_OUTPUT_THEME_DIR}/gtk-3.20/gtk.css"


    local GTK_THEME_DIR_SYMLINK="${HOME}/.themes/gcs-theme"
    [ -e "${GTK_THEME_DIR_SYMLINK}" ] && rm "${GTK_THEME_DIR_SYMLINK}"
    ln -s "${GTK_OUTPUT_THEME_DIR}" "${GTK_THEME_DIR_SYMLINK}"

    local GTK_ICON_THEME_FOUND="false"
    if ! [ -z "${gtk_icon_theme_name}" ]; then
        for icon_themes_directory in "/usr/share/icons" "/usr/local/share/icons" "${HOME}/.icons" "${HOME}/.local/share/icons"; do
            if [ -d "${icon_themes_directory}/${gtk_icon_theme_name}" ]; then
                GTK_ICON_THEME_FOUND="true"
                break
            fi
        done
    fi

    if ps -e | grep xsettingsd >/dev/null; then

        local GTK_XSETTINGSD_RESTART_COMMAND=$(crudini --get ${GCS_CONFIG_FILE} gtk xsettingsd_restart_command 2>/dev/null || echo )
        local GTK_XSETTINGSD_CONFIG_FILE=$(crudini --get ${GCS_CONFIG_FILE} gtk xsettingsd_config_file 2>/dev/null || echo "${HOME}/.xsettingsd")

        printf "  colors..."
        set_value "Net\/ThemeName" " " "\"gcs-theme\"" "${GTK_XSETTINGSD_CONFIG_FILE}"
        printf " done.\n"

        if ! [ -z "${gtk_icon_theme_name}" ]; then
            printf "  icon theme: ${gtk_icon_theme_name}..."
            if [ "${GTK_ICON_THEME_FOUND}" == "true" ]; then
                set_value "Net\/IconThemeName" " " "\"${gtk_icon_theme_name}\"" "${GTK_XSETTINGSD_CONFIG_FILE}"
                printf " done.\n"
            else
                printf " not found!\n"
            fi
        fi

        ${GTK_XSETTINGSD_RESTART_COMMAND} &>/dev/null


    elif ps ax | grep -E "(gnome-settings-daemon|gsd-xsettings|gnome-session-binary)" >/dev/null; then

        printf "  colors..."
        gsettings set "${GTK_GSETTINGS_PATH}" gtk-theme ""
        gsettings set "${GTK_GSETTINGS_PATH}" gtk-theme "gcs-theme"
        gsettings set "${GTK_GSETTINGS_PATH}" gtk-color-scheme ""
        printf " done.\n"

        if ! [ -z "${gtk_icon_theme_name}" ]; then
            printf "  icon theme: ${gtk_icon_theme_name}..."
            if [ "${GTK_ICON_THEME_FOUND}" == "true" ]; then
                gsettings set "${GTK_GSETTINGS_PATH}" icon-theme "${gtk_icon_theme_name}"
                printf " done.\n"
            else
                printf " not found!\n"
            fi
        fi

        printf " done.\n"

    else
        printf " no supported XSettings manager found!\n"
        # TODO: configure theme/colors with .gtkrc-2.0 and .config/gtk-3.0/settings.ini
    fi
}



function mix_hex_colors(){

    if [ "$#" -ne 3 ]; then
        echo "Error: ${FUNCNAME[0]}() requires 3 arguments!"
        exit 2
    fi

    local color1="${1}"
    local color2="${2}"
    local balance="${3}"

    local r1="$(printf "%d" 0x${color1:1:2})"
    local g1="$(printf "%d" 0x${color1:3:2})"
    local b1="$(printf "%d" 0x${color1:5:2})"
    local r2="$(printf "%d" 0x${color2:1:2})"
    local g2="$(printf "%d" 0x${color2:3:2})"
    local b2="$(printf "%d" 0x${color2:5:2})"

    local r="$(bc <<< "${r1}*${balance} + ${r2}*(1-${balance})" )"
    local g="$(bc <<< "${g1}*${balance} + ${g2}*(1-${balance})" )"
    local b="$(bc <<< "${b1}*${balance} + ${b2}*(1-${balance})" )"
    LC_ALL=C r="$(printf "%.0f" "${r}")"
    LC_ALL=C g="$(printf "%.0f" "${g}")"
    LC_ALL=C b="$(printf "%.0f" "${b}")"

    printf "#%x%x%x" "${r}" "${g}" "${b}"
}

