#!/bin/bash

mix_hex_colors(){

    if [ "$#" -ne 3 ]; then
        echo "Error: ${FUNCNAME[0]}() requires 3 arguments!"
        exit 2
    fi

    color1="${1}"
    color2="${2}"
    balance="${3}"

    r1="$(printf "%d" 0x${color1:1:2})"
    g1="$(printf "%d" 0x${color1:3:2})"
    b1="$(printf "%d" 0x${color1:5:2})"
    r2="$(printf "%d" 0x${color2:1:2})"
    g2="$(printf "%d" 0x${color2:3:2})"
    b2="$(printf "%d" 0x${color2:5:2})"

    r="$(bc <<< "${r1}*${balance} + ${r2}*(1-${balance})" )"
    g="$(bc <<< "${g1}*${balance} + ${g2}*(1-${balance})" )"
    b="$(bc <<< "${b1}*${balance} + ${b2}*(1-${balance})" )"
    LC_ALL=C r="$(printf "%.0f" "${r}")"
    LC_ALL=C g="$(printf "%.0f" "${g}")"
    LC_ALL=C b="$(printf "%.0f" "${b}")"

    printf "#%x%x%x" "${r}" "${g}" "${b}"
}


: ${gtk_base_color:=${base_color}}
: ${gtk_text_color:=${text_color}}
: ${gtk_bg_color:=${bg_color}}
: ${gtk_fg_color:=${fg_color}}
: ${gtk_menu_bg_color:=${bg_color}}
: ${gtk_menu_fg_color:=${fg_color}}
: ${gtk_selected_bg_color:=${selected_bg_color}}
: ${gtk_selected_fg_color:=${selected_fg_color}}
: ${gtk_button_bg_color:=${bg_color}}
: ${gtk_button_fg_color:=${fg_color}}
: ${gtk_header_button_bg_color:=${bg_color}}
: ${gtk_header_button_fg_color:=${fg_color}}
: ${gtk_selected_tab_color:=${selected_bg_color}}

: ${unity_titlebar_focused_bg_color:=${titlebar_focused_bg_color}}
: ${unity_titlebar_focused_fg_color:=${titlebar_focused_fg_color}}
: ${unity_titlebar_unfocused_bg_color:=${titlebar_unfocused_bg_color}}
: ${unity_titlebar_unfocused_fg_color:=${titlebar_unfocused_fg_color}}
: ${unity_titlebar_button_hover_original:=#f0544c}
: ${unity_titlebar_button_hover:=$(mix_hex_colors "${titlebar_focused_fg_color}" "${titlebar_focused_bg_color}" 0.5)}
: ${unity_titlebar_button_pressed_original:=#f0544c}
: ${unity_titlebar_button_pressed:=$(mix_hex_colors "${titlebar_focused_fg_color}" "${titlebar_focused_bg_color}" 0.25)}

gtk_roundness=$(crudini --get ${CONFIG_FILE} gtk roundness 2>/dev/null || echo 3)
gtk_spacing=$(crudini   --get ${CONFIG_FILE} gtk spacing   2>/dev/null || echo 3)
gtk_gradient=$(crudini  --get ${CONFIG_FILE} gtk gradient  2>/dev/null || echo 0.14)

GTK_ENABLE_DEFAULT="true"
GTK_ENABLE="$(crudini --get ${CONFIG_FILE} gtk enable 2>/dev/null || echo "${GTK_ENABLE_DEFAULT}")"

if ! [ "${GTK_ENABLE}" == "true" ]; then
    printf "* Not setting colors and icon theme for GTK+ (disabled from configuration).\n"

elif ! which oomox-cli >/dev/null; then 
    printf "* Not setting colors and icon theme for GTK+ (oomox not installed).\n"

else
    printf "* Setting colors and icon theme for GTK+...\n"

    TMPFILE="/tmp/.oomox-theme"

    echo "NAME=gcs-theme" > "${TMPFILE}"
    echo "BG=${gtk_bg_color:1}" >> "${TMPFILE}"
    echo "FG=${gtk_fg_color:1}" >> "${TMPFILE}"
    echo "MENU_BG=${gtk_menu_bg_color:1}" >> "${TMPFILE}"
    echo "MENU_FG=${gtk_menu_fg_color:1}" >> "${TMPFILE}"
    echo "SEL_BG=${gtk_selected_bg_color:1}" >> "${TMPFILE}"
    echo "SEL_FG=${gtk_selected_fg_color:1}" >> "${TMPFILE}"
    echo "TXT_BG=${gtk_base_color:1}" >> "${TMPFILE}"
    echo "TXT_FG=${gtk_text_color:1}" >> "${TMPFILE}"
    echo "BTN_BG=${gtk_button_bg_color:1}" >> "${TMPFILE}"
    echo "BTN_FG=${gtk_button_fg_color:1}" >> "${TMPFILE}"
    echo "HDR_BTN_BG=${gtk_header_button_bg_color:1}" >> "${TMPFILE}"
    echo "HDR_BTN_FG=${gtk_header_button_fg_color:1}" >> "${TMPFILE}"
    echo "GTK3_GENERATE_DARK=False" >> "${TMPFILE}"
    echo "ROUNDNESS=${gtk_roundness}" >> "${TMPFILE}"
    echo "SPACING=${gtk_spacing}" >> "${TMPFILE}"
    echo "GRADIENT=${gtk_gradient}" >> "${TMPFILE}"

    oomox-cli -o gcs-theme "${TMPFILE}" >/dev/null 2>/dev/null
    rm "${TMPFILE}"

    unity_decoration_temp="/tmp/.unity_decoration_temp.css"
    echo "
UnityDecoration.top {
  background-image: none;
  background-color: ${unity_titlebar_focused_bg_color};
  border-color: ${unity_titlebar_focused_bg_color};
  color: ${unity_titlebar_focused_fg_color};
}
UnityDecoration.top:backdrop {
  background-image: none;
  background-color: ${unity_titlebar_unfocused_bg_color};
  border-color: ${unity_titlebar_unfocused_bg_color};
  color: ${unity_titlebar_unfocused_fg_color};
}
UnityDecoration.left, UnityDecoration.right, UnityDecoration.bottom {
  background-image: none;
  background-color: ${unity_titlebar_focused_bg_color};
}
UnityDecoration.left:backdrop, UnityDecoration.right:backdrop, UnityDecoration.bottom:backdrop {
  background-image: none;
  background-color: ${unity_titlebar_unfocused_bg_color};
}
" > "${unity_decoration_temp}"
    cat "${unity_decoration_temp}" >> "${HOME}/.themes/gcs-theme/gtk-3.0/gtk.css"
    cat "${unity_decoration_temp}" >> "${HOME}/.themes/gcs-theme/gtk-3.20/gtk.css"

    rm "${unity_decoration_temp}"

    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/close_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/close_dash_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/close_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/close_unfocused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/maximize_dash_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/maximize_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/maximize_unfocused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/minimize_dash_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/minimize_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/minimize_unfocused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/sheet_style_close_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/unmaximize_dash_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/unmaximize_focused_prelight.svg"
    sed -i "s/${unity_titlebar_button_hover_original}/${unity_titlebar_button_hover}/" "${HOME}/.themes/gcs-theme/unity/unmaximize_unfocused_prelight.svg"

    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/close_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/close_dash_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/close_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/close_unfocused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/maximize_dash_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/maximize_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/maximize_unfocused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/minimize_dash_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/minimize_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/minimize_unfocused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/sheet_style_close_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/unmaximize_dash_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/unmaximize_focused_pressed.svg"
    sed -i "s/${unity_titlebar_button_pressed_original}/${unity_titlebar_button_pressed}/" "${HOME}/.themes/gcs-theme/unity/unmaximize_unfocused_pressed.svg"


    sed -i "s/style \"clearlooks-notebook-bg\" {/style \"clearlooks-notebook-bg\" {\n\tbg[SELECTED] = \"${gtk_selected_tab_color}\"/" "${HOME}/.themes/gcs-theme/gtk-2.0/gtkrc"

    gtk3_tabs_temp="/tmp/.gtk3-tabs-temp"
    echo "
.notebook tab.top:active {
  border-top-color: ${gtk_selected_tab_color};
}
.notebook tab.right:active {
  border-right-color: ${gtk_selected_tab_color};
}
.notebook tab.bottom:active {
  border-bottom-color: ${gtk_selected_tab_color};
}
.notebook tab.left:active {
  border-left-color: ${gtk_selected_tab_color};
}
" > "${gtk3_tabs_temp}"
    cat "${gtk3_tabs_temp}" >> "${HOME}/.themes/gcs-theme/gtk-3.0/gtk.css"
    rm "${gtk3_tabs_temp}"

    gtk3_20_tabs_temp="/tmp/.gtk3.20-tabs-temp"
    echo "
notebook > header.top > tabs > tab:checked {
  border-top-color: ${gtk_selected_tab_color};
}       
notebook > header.bottom > tabs > tab:checked {
  border-bottom-color: ${gtk_selected_tab_color};
}
notebook > header.right > tabs > tab:checked {
  border-right-color: ${gtk_selected_tab_color};
}
notebook > header.left > tabs > tab:checked {
  border-left-color: ${gtk_selected_tab_color};
}
notebook > header > tabs > tab button.flat:active, notebook > header > tabs > tab button.flat:active:hover {
  color: ${gtk_selected_tab_color};
}
" > "${gtk3_20_tabs_temp}"
    cat "${gtk3_20_tabs_temp}" >> "${HOME}/.themes/gcs-theme/gtk-3.20/gtk.css"
    rm "${gtk3_20_tabs_temp}"


    icon_theme_found="false"
    if ! [ -z "${icon_theme_name}" ]; then
        for i in "/usr/share/icons" "usr/local/share/icons" "$HOME/.icons" "$HOME/.local/share/icons"; do
            if [ -d "$i/$icon_theme_name" ]; then
                icon_theme_found="true"
            fi
        done
    fi

    if ps -e | grep xsettings >/dev/null; then

        GTK_XSETTINGSD_RESTART_COMMAND=$(crudini --get ${CONFIG_FILE} gtk xsettingsd_restart_command 2>/dev/null || echo )
        GTK_XSETTINGSD_CONFIG_FILE=$(crudini --get ${CONFIG_FILE} gtk xsettingsd_config_file 2>/dev/null || echo "$HOME/.xsettingsd")

        printf "  colors..."
        set_value "Net\/ThemeName" " " "\"gcs-theme\"" "${GTK_XSETTINGSD_CONFIG_FILE}"
        printf " done.\n"

        if ! [ -z "${icon_theme_name}" ]; then
            printf "  icon theme: ${icon_theme_name}..."
            if [ "${icon_theme_found}" == "true" ]; then
                set_value "Net\/IconThemeName" " " "\"${icon_theme_name}\"" "${GTK_XSETTINGSD_CONFIG_FILE}"
                printf " done.\n"
            else
                printf " not found!\n"
            fi
        fi

        $GTK_XSETTINGSD_RESTART_COMMAND &>/dev/null


    elif ps -e | grep gnome-settings- >/dev/null; then

        printf "  colors..."
        gsettings set org.gnome.desktop.interface gtk-theme ""
        gsettings set org.gnome.desktop.interface gtk-theme "gcs-theme"
        gsettings set org.gnome.desktop.interface gtk-color-scheme ""
        printf " done.\n"

        if ! [ -z "${icon_theme_name}" ]; then
            printf "  icon theme: ${icon_theme_name}..."
            if [ "${icon_theme_found}" == "true" ]; then
                gsettings set org.gnome.desktop.interface icon-theme "${icon_theme_name}"
                printf " done.\n"
            else
                printf " not found!\n"
            fi
        fi

        printf " done.\n"

    else
        printf " no supported XSettings manager found!\n"
        # TODO: configure theme/colors with .gtkrc-2.0 and .config/gtk-3.0/settings.ini
    fi

fi
