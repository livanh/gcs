#!/bin/bash

function vim_init_module() {
    VIM_ENABLE_DEFAULT="true"
    VIM_CONFIG_FILE_DEFAULT="$HOME/.vimrc"
    VIM_COLORSCHEME_FILE_DEFAULT="$HOME/.vim/colors/${FULL_COLOR_THEME_NAME}.vim"

    VIM_ENABLE="$(crudini           --get ${GCS_CONFIG_FILE} vim enable           2>/dev/null || echo "${VIM_ENABLE_DEFAULT}")"
    VIM_CONFIG_FILE="$(crudini      --get ${GCS_CONFIG_FILE} vim config_file      2>/dev/null || echo "${VIM_CONFIG_FILE_DEFAULT}")"
    VIM_COLORSCHEME_FILE="$(crudini --get ${GCS_CONFIG_FILE} vim colorscheme_file 2>/dev/null || echo "${VIM_COLORSCHEME_FILE_DEFAULT}")"

    GCS_SYNTAX_FALLBACK_DEFAULT="true"
    GCS_SYNTAX_FALLBACK="$(crudini --get ${GCS_CONFIG_FILE} gcs syntax_fallback 2>/dev/null || echo "${GCS_SYNTAX_FALLBACK_DEFAULT}")"
    VIM_SYNTAX_FALLBACK="$(crudini --get ${GCS_CONFIG_FILE} vim syntax_fallback 2>/dev/null || echo "${GCS_SYNTAX_FALLBACK}")"
}



function vim_check_dependencies() {
    if ! which vim >/dev/null; then
        return 1

    elif ! [ "${VIM_ENABLE}" == "true" ]; then
        printf "* Ignoring Vim (disabled from configuration).\n"
        return 1

    elif ! [ -f "$VIM_CONFIG_FILE}" ]; then
        printf "* Ignoring Vim (configuration file ${VIM_CONFIG_FILE} not found).\n"
        return 1

    else
        return 0

    fi
}



function vim_derive_colors() {
    : ${vim_normal_fg_color:=${editor_fg}}
    : ${vim_normal_bg_color:=${editor_bg}}
    : ${vim_linenr_fg_color:=${editor_frame_fg}}
    : ${vim_linenr_bg_color:=${editor_frame_bg}}
    : ${vim_white_space_color:=${editor_white_space}}
    : ${vim_current_line_bg:=${editor_current_line_bg}}
    : ${vim_selected_fg:=${editor_selected_fg}}
    : ${vim_selected_bg:=${editor_selected_bg}}
    : ${vim_comment:=${editor_comment}}
    : ${vim_string:=${editor_string}}
    : ${vim_operator:=${editor_operator}}
    : ${vim_keyword:=${editor_keyword}}
    : ${vim_preprocessor:=${editor_preprocessor}}
    : ${vim_identifier:=${editor_variable}}
    : ${vim_type:=${editor_class}}
    : ${vim_character:=${editor_character}}
    : ${vim_number:=${editor_number}}
}



function vim_create_backup() {
    printf "* Making backup of Vim configuration file..."

    VIM_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/vim"
    mkdir -p "${VIM_BACKUP_DIR}"
    cp "${VIM_CONFIG_FILE}" "${VIM_BACKUP_DIR}/vimrc"

    printf " done.\n"
}



function vim_restore_backup() {
    printf "* Restoring backup of Vim configuration file..."

    VIM_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/vim"
    if [ -f "${VIM_BACKUP_DIR}/vimrc" ]; then
        cp "${VIM_BACKUP_DIR}/vimrc" "${VIM_CONFIG_FILE}"

        for server in $(vim --serverlist); do
            vim --servername ${server} --remote-send "<ESC>:source ${VIM_CONFIG_FILE}<CR>"
        done

        printf " done.\n"
    else
        printf " not found!\n"
    fi
}



function vim_apply_theme() {
    if [ "${editor_syntax_enable}" == "false" ]; then
        if [ "${VIM_SYNTAX_FALLBACK}" == "true" ]; then
            printf "* Setting default colors for Vim GUI..."
            sed -i".gcs-bak" "s/colorscheme.*/colorscheme default/" "${VIM_CONFIG_FILE}"
            rm "${VIM_CONFIG_FILE}.gcs-bak"

            for server in $(vim --serverlist); do
                vim --servername ${server} --remote-send ":colorscheme default<CR>"
            done

            printf " done.\n"

        fi

    else
        printf "* Setting colors for Vim GUI..."

        [ -d "$HOME/.vim/colors" ] || mkdir -p "$HOME/.vim/colors"

        echo "hi clear" > "${VIM_COLORSCHEME_FILE}"
        echo "if exists('syntax_on')" >> "${VIM_COLORSCHEME_FILE}"
        echo "    syntax reset" >> "${VIM_COLORSCHEME_FILE}"
        echo "endif" >> "${VIM_COLORSCHEME_FILE}"
        echo "let colors_name = \"${FULL_COLOR_THEME_NAME}\"" >> "${VIM_COLORSCHEME_FILE}"

        echo ":hi normal guifg=${vim_normal_fg_color} guibg=${vim_normal_bg_color}"             >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi lineNr guifg=${vim_linenr_fg_color} guibg=${vim_linenr_bg_color}"             >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi cursorLineNr guifg=${vim_linenr_fg_color} guibg=${vim_linenr_bg_color}"       >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi NonText guifg=${vim_normal_fg_color} guibg=${vim_normal_bg_color}"            >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi SpecialKey guifg=${vim_white_space_color}"                                    >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi CursorLine guifg=NONE guibg=${vim_current_line_bg}"                           >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi Cursor guifg=${vim_selected_fg} guibg=${vim_selected_bg}"                     >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi Visual guifg=${vim_selected_fg} guibg=${vim_selected_bg}"                     >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi Comment guifg=${vim_comment}"                                                 >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi String guifg=${vim_string}"                                                   >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi Operator guifg=${vim_operator}"                                               >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi Statement guifg=${vim_keyword}"                                               >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi PreProc guifg=${vim_preprocessor}"                                            >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi Identifier guifg=${vim_identifier}"                                           >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi Type guifg=${vim_type}"                                                       >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi Special guifg=${vim_keyword}"                                                 >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi Character guifg=${vim_character}"                                             >> "${VIM_COLORSCHEME_FILE}"
        echo ":hi Number guifg=${vim_number}"                                                   >> "${VIM_COLORSCHEME_FILE}"

        sed -i".gcs-bak" "s/colorscheme.*/colorscheme ${FULL_COLOR_THEME_NAME}/" "${VIM_CONFIG_FILE}"
        rm "${VIM_CONFIG_FILE}.gcs-bak"

        for server in $(vim --serverlist); do
            vim --servername ${server} --remote-send "<ESC>:colorscheme ${FULL_COLOR_THEME_NAME}<CR>"
        done

        printf " done.\n"

    fi
}



vim_init_module
vim_check_dependencies
[ $? == 1 ] && return

if [ "${GCS_ACTION}" == "create-backup" ]; then
    vim_create_backup

elif [ "${GCS_ACTION}" == "restore-backup" ]; then
    vim_restore_backup

elif [ "${GCS_ACTION}" == "apply-theme" ]; then
    vim_derive_colors
    vim_apply_theme

fi

