#!/bin/bash
# TODO: handle cases when $wallpaper_image, $wallpaper_mode or $wallpaper_bg_color is not set by the theme

function init_module() {
    BACKGROUND_NAUTILUS_ENABLE_DEFAULT="true"
    BACKGROUND_NAUTILUS_ENABLE="$(crudini --get ${GCS_CONFIG_FILE} background-nautilus enable 2>/dev/null || echo "${BACKGROUND_NAUTILUS_ENABLE_DEFAULT}")"
    BACKGROUND_NAUTILUS_GSETTINGS_PATH="org.gnome.desktop.background"
}



function check_dependencies() {
    if ! which nautilus >/dev/null; then
        return 1

    elif ! which gsettings >/dev/null; then
        return 1

    elif ! which pgrep >/dev/null; then
        return 1

    elif ! [ "${BACKGROUND_NAUTILUS_ENABLE}" == "true" ]; then
        printf "* Ignoring wallpaper for Nautilus (disabled from configuration).\n"
        return 1

    else
        return 0

    fi
}



function derive_colors() {
    for color_theme_dir in ${COLOR_THEME_DIRS[@]}; do
        if [ -f "${color_theme_dir}/${wallpaper_image}" ]; then
            wallpaper_file="${color_theme_dir}/${wallpaper_image}"
        fi
    done
}



function create_backup() {
    printf "* Making backup of wallpaper for nautilus..."

    local BACKGROUND_NAUTILUS_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/background-nautilus"
    mkdir -p "${BACKGROUND_NAUTILUS_BACKUP_DIR}"

    gsettings get "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "color-shading-type" > "${BACKGROUND_NAUTILUS_BACKUP_DIR}/color-shading-type"
    gsettings get "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-opacity"    > "${BACKGROUND_NAUTILUS_BACKUP_DIR}/picture-opacity"
    gsettings get "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "primary-color"      > "${BACKGROUND_NAUTILUS_BACKUP_DIR}/primary-color"
    gsettings get "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "secondary-color"    > "${BACKGROUND_NAUTILUS_BACKUP_DIR}/secondary-color"
    gsettings get "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-uri"        > "${BACKGROUND_NAUTILUS_BACKUP_DIR}/picture-uri"
    gsettings get "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-options"    > "${BACKGROUND_NAUTILUS_BACKUP_DIR}/picture-options"

    printf " done.\n"
}



function restore_backup() {
    printf "* Restoring backup of wallpaper for nautilus..."

    local BACKGROUND_NAUTILUS_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/background-nautilus"

    if [ -f "${BACKGROUND_NAUTILUS_BACKUP_DIR}/color-shading-type" ]; then
        gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "color-shading-type" $(cat "${BACKGROUND_NAUTILUS_BACKUP_DIR}/color-shading-type")
    fi

    if [ -f "${BACKGROUND_NAUTILUS_BACKUP_DIR}/picture-opacity" ]; then
        gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-opacity"    $(cat "${BACKGROUND_NAUTILUS_BACKUP_DIR}/picture-opacity")
    fi

    if [ -f "${BACKGROUND_NAUTILUS_BACKUP_DIR}/primary-color" ]; then
        gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "primary-color"      $(cat "${BACKGROUND_NAUTILUS_BACKUP_DIR}/primary-color")
    fi

    if [ -f "${BACKGROUND_NAUTILUS_BACKUP_DIR}/secondary-color" ]; then
        gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "secondary-color"    $(cat "${BACKGROUND_NAUTILUS_BACKUP_DIR}/secondary-color")
    fi

    if [ -f "${BACKGROUND_NAUTILUS_BACKUP_DIR}/picture-uri" ]; then
        gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-uri"        $(cat "${BACKGROUND_NAUTILUS_BACKUP_DIR}/picture-uri")
    fi

    if [ -f "${BACKGROUND_NAUTILUS_BACKUP_DIR}/picture-options" ]; then
        gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-options"    $(cat "${BACKGROUND_NAUTILUS_BACKUP_DIR}/picture-options")
    fi

    printf " done.\n"
}



function dry_run() {
    printf "* Nautilus: set desktop wallpaper.\n"
}



function print_module_help() {
    echo "Help for GCS ${BASH_SOURCE##*/} module"
    echo
    echo "This module sets the desktop wallpaper for Nautilus (when it is used to display desktop icons). This is accomplished by writing to the appropriate GSettings keys."
    echo "Please note that Nautilus stopped providing desktop icons since version 3.28."
    echo
    echo "Backup and restore are supported."
    echo
}



function apply_theme() {
    if ! [ -f "${wallpaper_file}" ]; then
        printf "* Not setting wallpaper with Nautilus (image file not found: \"${wallpaper_image}\").\n"

    elif ! pgrep "^\<nautilus\>" >/dev/null; then
        printf "* Not setting wallpaper with Nautilus (desktop manager is not active).\n"

    else
        printf "* Setting wallpaper with Nautilus..."

        gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" color-shading-type "solid"
        gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" primary-color "${wallpaper_bg_color}"

        case "${wallpaper_mode}" in
            centered)  gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-uri"     "file://${wallpaper_file}"
                       gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-options" "centered";;
            tiled)     gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-uri"     "file://${wallpaper_file}"
                       gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-options" "spanned";;
            stretched) gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-uri"     "file://${wallpaper_file}"
                       gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-options" "stretched";;
            zoom-fit)  gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-uri"     "file://${wallpaper_file}"
                       gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-options" "scaled";;
            zoom-fill) gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-uri"     "file://${wallpaper_file}"
                       gsettings set "${BACKGROUND_NAUTILUS_GSETTINGS_PATH}" "picture-options" "zoom";;
        esac

        local DESKTOP_BACKGROUND_SYMLINK="${HOME}/.config/desktop-background"
        [ -e "${DESKTOP_BACKGROUND_SYMLINK}" ] && rm "${DESKTOP_BACKGROUND_SYMLINK}"
        ln -s "${wallpaper_file}" "${DESKTOP_BACKGROUND_SYMLINK}"

        printf " done.\n"

    fi
}

