#!/bin/bash

function init_module() {
    MELD_ENABLE_DEFAULT="true"
    MELD_ENABLE="$(crudini --get ${GCS_CONFIG_FILE} meld enable 2>/dev/null || echo "${MELD_ENABLE_DEFAULT}")"
    MELD_DEFAULT_STYLE_FILE="/usr/share/meld/styles/meld-base.xml"
    MELD_DESTINATION_STYLE_FILE="${HOME}/.local/share/gtksourceview-3.0/styles/${FULL_COLOR_THEME_NAME}-meld.xml"

    GCS_SYNTAX_FALLBACK_DEFAULT="true"
    GCS_SYNTAX_FALLBACK="$(crudini  --get ${GCS_CONFIG_FILE} gcs  syntax_fallback 2>/dev/null || echo "${GCS_SYNTAX_FALLBACK_DEFAULT}")"
    MELD_SYNTAX_FALLBACK="$(crudini --get ${GCS_CONFIG_FILE} meld syntax_fallback 2>/dev/null || echo "${GCS_SYNTAX_FALLBACK}")"
    MELD_GSETTINGS_PATH="org.gnome.meld"
}



function check_dependencies() {
    if ! which -s meld; then
        return 1

    elif ! which -s gsettings; then
        return 1

    elif ! which -s xmlstarlet; then
        printf "* Not setting colors for Meld (XMLStarlet is not installed).\n"
        return 1

    elif ! [ "${MELD_ENABLE}" == "true" ]; then
        printf "* Ignoring Meld (disabled from configuration).\n"
        return 1

    elif ! [ -f "${MELD_DEFAULT_STYLE_FILE}" ]; then
        printf "* Ignoring Meld (default style not found: \"${MELD_DEFAULT_STYLE_FILE}\").\n"
        return 1

    else
        return 0

    fi
}



function derive_colors() {
    : ${meld_insert_text:=${selected_fg_color}}
    : ${meld_insert_bg:=${editor_diff_added}}
    : ${meld_insert_outline:=${editor_diff_added}}

    : ${meld_replace_text:=${selected_fg_color}}
    : ${meld_replace_bg:=${editor_diff_removed}}
    : ${meld_replace_outline:=${editor_diff_removed}}

    : ${meld_conflict_text:=${selected_fg_color}}
    : ${meld_conflict_bg:=${editor_diff_changed}}
    : ${meld_conflict_outline:=${editor_diff_changed}}

    : ${meld_delete_text:=${selected_fg_color}}
    : ${meld_delete_bg:=${editor_diff_removed}}
    : ${meld_delete_outline:=${editor_diff_removed}}

    : ${meld_error_text:=${selected_fg_color}}
    : ${meld_error_bg:=${error_color}}
    : ${meld_error_outline:=${error_color}}

    : ${meld_inline_bg:=${selected_bg_color}}
    : ${meld_current_line_highlight:=${editor_current_line_bg}}
    : ${meld_unknown_text:=${selected_fg_color}}
    : ${meld_syncpoint_outline:=${editor_diff_added}}
    : ${meld_current_chunk_highlight:=${base_color}}
    : ${meld_dimmed_bg:=${editor_current_line_bg}}
}



function create_backup() {
    printf "* Making backup of colors for Meld..."

    local MELD_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/meld"
    mkdir -p "${MELD_BACKUP_DIR}"
    gsettings get "${MELD_GSETTINGS_PATH}" "style-scheme" > "${MELD_BACKUP_DIR}/style-scheme"

    printf " done.\n"
}



function restore_backup() {
    printf "* Restoring backup of colors for Meld..."

    local MELD_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/meld"
    if [ -f "${MELD_BACKUP_DIR}/style-scheme" ]; then
        gsettings set"${MELD_GSETTINGS_PATH}" "style-scheme" $(cat "${MELD_BACKUP_DIR}/style-scheme")
        printf " done.\n"
    else
        printf " not found!\n"
    fi
}



function dry_run() {
    printf "* meld: create a new syntax highlighting scheme and set it as default via GSettings.\n"
}



function print_module_help() {
    echo "Help for GCS ${BASH_SOURCE##*/} module"
    echo
    echo "This module setscolors for meld. This is accomplished by creating a new GtkSourceView theme and setting it via GSettings, so no restart is required."
    echo
    echo "Backup and restore are supported."
    echo
}



function apply_theme() {
    if [ "${editor_syntax_enable}" == "false" ]; then
        if [[ "$(gsettings get "${MELD_GSETTINGS_PATH}" style-scheme)" == "'gcs"* ]]; then
            if [ "${MELD_SYNTAX_FALLBACK}" == "true" ]; then
                printf "* Setting default colors for Meld..."
                gsettings set "${MELD_GSETTINGS_PATH}" "style-scheme" "meld-base"
                printf " done.\n"
            fi
        fi

    else
        printf "* Setting colors for Meld..."

        install -D "${MELD_DEFAULT_STYLE_FILE}" "${MELD_DESTINATION_STYLE_FILE}"

        xmlstarlet ed --inplace --update "/style-scheme/@id"          --value "${FULL_COLOR_THEME_NAME}-meld"          "${MELD_DESTINATION_STYLE_FILE}"
        xmlstarlet ed --inplace --update "/style-scheme/@_name"       --value "GCS ${COLOR_THEME_NAME} theme for MELD" "${MELD_DESTINATION_STYLE_FILE}"
        xmlstarlet ed --inplace --update "/style-scheme/author"       --value "GCS - Global Color Scheme"              "${MELD_DESTINATION_STYLE_FILE}"
        xmlstarlet ed --inplace --update "/style-scheme/_description" --value "Theme auto-generated by GCS"            "${MELD_DESTINATION_STYLE_FILE}"

        [ "${meld_insert_text}"             != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:insert']/@foreground"                  --value "${meld_insert_text}"                                   "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_insert_bg}"               != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:insert']/@background"                  --value "#rgba($(hex2rgb ${meld_insert_bg}), 0.5)"                "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_insert_outline}"          != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:insert']/@line-background"             --value "${meld_insert_outline}"                                "${MELD_DESTINATION_STYLE_FILE}"

        [ "${meld_replace_text}"            != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:replace']/@foreground"                 --value "${meld_replace_text}"                                  "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_replace_bg}"              != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:replace']/@background"                 --value "#rgba($(hex2rgb ${meld_replace_bg}), 0.5)"               "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_replace_outline}"         != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:replace']/@line-background"            --value "${meld_replace_outline}"                               "${MELD_DESTINATION_STYLE_FILE}"

        [ "${meld_conflict_text}"           != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:conflict']/@foreground"                --value "${meld_conflict_text}"                                 "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_conflict_bg}"             != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:conflict']/@background"                --value "#rgba($(hex2rgb ${meld_conflict_bg}), 0.5)"              "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_conflict_outline}"        != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:conflict']/@line-background"           --value "${meld_conflict_outline}"                              "${MELD_DESTINATION_STYLE_FILE}"

        [ "${meld_delete_text}"             != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:delete']/@foreground"                  --value "${meld_delete_text}"                                   "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_delete_bg}"               != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:delete']/@background"                  --value "#rgba($(hex2rgb ${meld_delete_bg}), 0.5)"                "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_delete_outline}"          != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:delete']/@line-background"             --value "${meld_delete_outline}"                                "${MELD_DESTINATION_STYLE_FILE}"

        [ "${meld_error_text}"              != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:error']/@foreground"                   --value "${meld_error_text}"                                    "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_error_bg}"                != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:error']/@background"                   --value "#rgba($(hex2rgb ${meld_error_bg}), 0.5)"                 "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_error_outline}"           != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:error']/@line-background"              --value "${meld_error_outline}"                                 "${MELD_DESTINATION_STYLE_FILE}"

        [ "${meld_inline_bg}"               != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:inline']/@background"                  --value "${meld_inline_bg}"                                     "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_current_line_highlight}"  != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:current-line-highlight']/@background"  --value "${meld_current_line_highlight}"                        "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_unknown_text}"            != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:unknown-text']/@foreground"            --value "${meld_unknown_text}"                                  "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_syncpoint_outline}"       != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:syncpoint-outline']/@background"       --value "${meld_syncpoint_outline}"                             "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_current_chunk_highlight}" != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:current-chunk-highlight']/@background" --value "#rgba($(hex2rgb ${meld_current_chunk_highlight}), 0.25)" "${MELD_DESTINATION_STYLE_FILE}"
        [ "${meld_dimmed_bg}"               != "" ] && xmlstarlet ed --inplace --update "/style-scheme/style[@name='meld:dimmed']/@background"                  --value "${meld_current_dimmed}"                                "${MELD_DESTINATION_STYLE_FILE}"

        gsettings set "${MELD_GSETTINGS_PATH}" "style-scheme" "${FULL_COLOR_THEME_NAME}-meld"

        printf " done.\n"

    fi
}



function hex2rgb(){
    printf "%d, %d, %d" 0x${1:1:2} 0x${1:3:2} 0x${1:5:2}
}

