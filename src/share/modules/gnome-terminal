#!/bin/bash

function init_module() {
    GNOME_TERMINAL_ENABLE_DEFAULT="true"
    GNOME_TERMINAL_PROFILE_DEFAULT="Default"

    GNOME_TERMINAL_ENABLE="$(crudini  --get ${GCS_CONFIG_FILE} gnome-terminal enable  2>/dev/null || echo "${GNOME_TERMINAL_ENABLE_DEFAULT}")"
    GNOME_TERMINAL_PROFILE="$(crudini --get ${GCS_CONFIG_FILE} gnome-terminal profile 2>/dev/null || echo "${GNOME_TERMINAL_PROFILE_DEFAULT}")"

    GNOME_TERMINAL_GSETTINGS_PATH="org.gnome.Terminal.Legacy.Profile:"
    GNOME_TERMINAL_DCONF_PATH="/org/gnome/terminal/legacy/profiles:"
    GNOME_TERMINAL_PROFILES_LIST_PATH="org.gnome.Terminal.ProfilesList"
}



function check_dependencies() {
    if ! which gnome-terminal >/dev/null; then
        return 1

    elif ! which gsettings >/dev/null; then
        return 1

    elif ! which uuid >/dev/null; then
        printf "* Ignoring GNOME Terminal (uuid not installed).\n"
        return 1

    elif ! [ "${GNOME_TERMINAL_ENABLE}" == "true" ]; then
        printf "* Ignoring GNOME Terminal (disabled from configuration).\n"
        return 1

    else
        return 0

    fi
}



function derive_colors() {
    : ${gnome_terminal_bg_color:=${terminal_bg_color}}
    : ${gnome_terminal_fg_color:=${terminal_fg_color}}
}



function create_backup() {
    printf "* Making backup of colors for GNOME Terminal..."

    local GNOME_TERMINAL_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/gnome-terminal"
    mkdir -p "${GNOME_TERMINAL_BACKUP_DIR}"

    local GNOME_TERMINAL_DEFAULT_PROFILE_ID="$(gsettings get "${GNOME_TERMINAL_PROFILES_LIST_PATH}" default | tr -d "'")"

    gsettings get "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_DEFAULT_PROFILE_ID}/" "use-theme-colors" > "${GNOME_TERMINAL_BACKUP_DIR}/use-theme-colors"
    gsettings get "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_DEFAULT_PROFILE_ID}/" "background-color" > "${GNOME_TERMINAL_BACKUP_DIR}/background-color"
    gsettings get "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_DEFAULT_PROFILE_ID}/" "foreground-color" > "${GNOME_TERMINAL_BACKUP_DIR}/foreground-color"
    gsettings get "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_DEFAULT_PROFILE_ID}/" "palette" > "${GNOME_TERMINAL_BACKUP_DIR}/palette"

    printf " done.\n"
}



function restore_backup() {
    printf "* Restoring backup of colors for GNOME Terminal..."

    local GNOME_TERMINAL_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/gnome-terminal"

    local GNOME_TERMINAL_PROFILE_ID="$(gsettings get "${GNOME_TERMINAL_PROFILES_LIST_PATH}" default | tr -d "'")"

    if [ -f "${GNOME_TERMINAL_BACKUP_DIR}/use-theme-colors" ]; then
        gsettings set "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_PROFILE_ID}/" "use-theme-colors" $(cat "${GNOME_TERMINAL_BACKUP_DIR}/use-theme-colors")
    fi

    if [ -f "${GNOME_TERMINAL_BACKUP_DIR}/background-color" ]; then
        gsettings set "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_PROFILE_ID}/" "background-color" $(cat "${GNOME_TERMINAL_BACKUP_DIR}/background-color")
    fi

    if [ -f "${GNOME_TERMINAL_BACKUP_DIR}/foreground-color" ]; then
        gsettings set "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_PROFILE_ID}/" "foreground-color" $(cat "${GNOME_TERMINAL_BACKUP_DIR}/foreground-color")
    fi

    if [ -f "${GNOME_TERMINAL_BACKUP_DIR}/palette" ]; then
        gsettings set "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_PROFILE_ID}/" "palette" $(cat "${GNOME_TERMINAL_BACKUP_DIR}/palette")
    fi

    printf " done.\n"
}



function dry_run() {
    printf "* GNOME Terminal: change text, background, and palette colors, and apply them via GSettings.\n"
}



function print_module_help() {
    echo "Help for GCS ${BASH_SOURCE##*/} module"
    echo
    echo "This module sets background, foreground, and palette colors for GNOME Terminal. This is accomplished by creating a new profile and configurint it via GSettings, so no restart is required."
    echo
    echo "Backup and restore are supported."
    echo
}



function apply_theme() {
    printf "* Setting colors for GNOME Terminal..."

    local GNOME_TERMINAL_DEFAULT_PROFILE_ID="$(gsettings get "${GNOME_TERMINAL_PROFILES_LIST_PATH}" default | tr -d "'")"

    gsettings set "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_DEFAULT_PROFILE_ID}/" "use-theme-colors" "false"
    gsettings set "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_DEFAULT_PROFILE_ID}/" "background-color" "'${gnome_terminal_bg_color}'"
    gsettings set "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_DEFAULT_PROFILE_ID}/" "foreground-color" "'${gnome_terminal_fg_color}'"
    gsettings set "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${GNOME_TERMINAL_DEFAULT_PROFILE_ID}/" "palette" "['${terminal_palette_black}', '${terminal_palette_red}', '${terminal_palette_green}', '${terminal_palette_yellow}', '${terminal_palette_blue}', '${terminal_palette_purple}', '${terminal_palette_cyan}', '${terminal_palette_white}', '${terminal_palette_light_black}', '${terminal_palette_light_red}', '${terminal_palette_light_green}', '${terminal_palette_light_yellow}', '${terminal_palette_light_blue}', '${terminal_palette_light_purple}', '${terminal_palette_light_cyan}', '${terminal_palette_light_white}']"

    gnome_terminal_duplicate_profile "${GNOME_TERMINAL_DEFAULT_PROFILE_ID}" "${FULL_COLOR_THEME_NAME}"

    printf " done.\n"
}


function gnome_terminal_create_new_profile() {
    local profile_ids=($(gsettings get "${GNOME_TERMINAL_PROFILES_LIST_PATH}" "list" | tr -d "[ ']" | tr ',' '\n'))
    local profile_name="$1"
    local profile_ids_old="$(gsettings get "${GNOME_TERMINAL_PROFILES_LIST_PATH}" "list" | tr -d "]")"
    local profile_id="$(uuid -v3 "f0c5a346-993a-4868-9651-086a017bff9d" "${profile_name}" )"

    if ! echo ${profile_ids[@]} | grep "${profile_id}" >/dev/null; then
        [ -z "${profile_ids_old}" ] && local lb="["  # if there's no `list` key
        [ ${#profile_ids[@]} -gt 0 ] && local delimiter=,  # if the list is empty
        gsettings set "${GNOME_TERMINAL_PROFILES_LIST_PATH}" "list" "${lb}${profile_ids_old}${delimiter} '${profile_id}']"
    fi
    echo ${profile_id}
}

function gnome_terminal_duplicate_profile() {
    local old_profile_id="$1"
    local new_profile_name="$2"

    local profile_ids=($(gsettings get "${GNOME_TERMINAL_PROFILES_LIST_PATH}" "list" | tr -d "[ ']" | tr ',' '\n'))
    if ! echo ${profile_ids[@]} | grep "${old_profile_id}" >/dev/null; then
        return 1
    fi

    local new_profile_id="$(gnome_terminal_create_new_profile "${new_profile_name}")"
    for key in $(gsettings list-keys "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${old_profile_id}/"); do
        local value="$(gsettings get "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${old_profile_id}/" "${key}")"
        gsettings set "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${new_profile_id}/" "${key}" "${value}"
    done
    gsettings set "${GNOME_TERMINAL_GSETTINGS_PATH}${GNOME_TERMINAL_DCONF_PATH}/:${new_profile_id}/" "visible-name" "${new_profile_name}"
}

