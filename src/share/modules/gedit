#!/bin/bash


function init_module() {
    GEDIT_ENABLE_DEFAULT="true"
    GEDIT_ENABLE="$(crudini      --get ${GCS_CONFIG_FILE} gedit enable      2>/dev/null || echo "${GEDIT_ENABLE_DEFAULT}")"

    GCS_SYNTAX_FALLBACK_DEFAULT="true"
    GCS_SYNTAX_FALLBACK="$(crudini   --get ${GCS_CONFIG_FILE} gcs  syntax_fallback  2>/dev/null || echo "${GCS_SYNTAX_FALLBACK_DEFAULT}")"
    GEDIT_SYNTAX_FALLBACK="$(crudini --get ${GCS_CONFIG_FILE} gedit syntax_fallback 2>/dev/null || echo "${GCS_SYNTAX_FALLBACK}")"
    GEDIT_GSETTINGS_PATH="org.gnome.gedit.preferences.editor"
}



function check_dependencies() {
    if ! which -s gedit; then
        return 1

    elif ! which -s gsettings; then
        return 1

    elif ! [ "${GEDIT_ENABLE}" == "true" ]; then
        printf "* Ignoring gedit (disabled from configuration).\n"
        return 1

    else
        return 0

    fi
}



function derive_colors() {
    : ${gedit_bg:=${editor_bg}}
    : ${gedit_fg:=${editor_fg}}
    : ${gedit_selected_bg:=${editor_selected_bg}}
    : ${gedit_selected_fg:=${editor_selected_fg}}
    : ${gedit_line_numbers_bg:=${editor_frame_bg}}
    : ${gedit_line_numbers_fg:=${editor_frame_fg}}
    : ${gedit_current_line_bg:=${editor_current_line_bg}}
    : ${gedit_draw_spaces:=${editor_indent_guide}}

    : ${gedit_number:=${editor_number}}
    : ${gedit_floating_point:=${editor_number}}
    : ${gedit_type:=${editor_class}}
    : ${gedit_identifier:=${editor_class}}
    : ${gedit_variable:=${editor_class}}
    : ${gedit_string:=${editor_string}}
    : ${gedit_constant:=${editor_string}}
    : ${gedit_special_constant:=${editor_operator}}
    : ${gedit_note:=${editor_string}}
    : ${gedit_comment:=${editor_comment}}
    : ${gedit_error:=${editor_error}}
    : ${gedit_warning:=${editor_error}}
    : ${gedit_keyword:=${editor_keyword}}
    : ${gedit_builtin:=${editor_keyword}}
    : ${gedit_specials:=${editor_operator}}
    : ${gedit_boolean:=${editor_operator}}
    : ${gedit_special_char:=${editor_character}}
    : ${gedit_preprocessor:=${editor_preprocessor}}
    : ${gedit_brace_good:=${editor_brace_good}}
    : ${gedit_statement:=${editor_string}}

    : ${gedit_diff_added:=${editor_diff_added}}
    : ${gedit_diff_removed:=${editor_diff_removed}}
    : ${gedit_diff_changed:=${editor_diff_changed}}
    : ${gedit_diff_file:=${editor_preprocessor}}
    : ${gedit_diff_location:=${editor_number}}
    : ${gedit_diff_special_case:=${editor_keyword}}

    : ${gedit_ruby_module_handler:=${editor_preprocessor}}
    : ${gedit_ruby_symbol:=${editor_character}}
    : ${gedit_ruby_regex:=${editor_operator}}

    : ${gedit_sh_function:=${editor_keyword}}

    : ${gedit_xml_attribute_name:=${editor_keyword}}
    : ${gedit_xml_element_name:=${editor_preprocessor}}
    : ${gedit_xml_entity:=${editor_class}}
}



function create_backup() {
    printf "* Making backup of colors for gedit..."

    local GEDIT_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/gedit"
    mkdir -p "${GEDIT_BACKUP_DIR}"
    gsettings get "${GEDIT_GSETTINGS_PATH}" scheme > "${GEDIT_BACKUP_DIR}/scheme"

    printf " done.\n"
}



function restore_backup() {
    printf "* Restoring backup of colors for gedit.\n"

    local GEDIT_BACKUP_DIR="${GCS_BACKUPS_DIR}/${GCS_BACKUP_NAME}/gedit"
    if [ -f "${GEDIT_BACKUP_DIR}/scheme" ]; then
        gsettings set "${GEDIT_GSETTINGS_PATH}" scheme $(cat "${GEDIT_BACKUP_DIR}/scheme")
        printf " done.\n"
    else
        printf " not found!\n"
    fi
}



function dry_run() {
    printf "* gedit: create a new syntax highlighting scheme and set it as default via GSettings.\n"
}



function print_module_help() {
    echo "Help for GCS ${BASH_SOURCE##*/} module"
    echo
    echo "This module sets syntax highlighting for gedit. This is accomplished by creating a new theme for GtkSourceView and applying it via GSettings, so no restart is required."
    echo
    echo "Backup and restore are supported."
    echo
}



function apply_theme() {
    if [ "${editor_syntax_enable}" == "false" ]; then
        if [ "${GEDIT_SYNTAX_FALLBACK}" == "true" ]; then
            printf "* Setting default colors for gedit..."
            gsettings set "${GEDIT_GSETTINGS_PATH}" scheme "Default"
            printf " done.\n"
        fi

    else
        printf "* Setting colors for gedit..."
        local GEDIT_TEMPLATE_FILE="$(find_module_template "gedit-template.xml")"

        if [ -f "${GEDIT_TEMPLATE_FILE}" ]; then
            mkdir -p "${HOME}/.local/share/gtksourceview-3.0/styles"
            local GEDIT_THEME_FILE="${HOME}/.local/share/gtksourceview-3.0/styles/${FULL_COLOR_THEME_NAME}.xml"
            cp "${GEDIT_TEMPLATE_FILE}" "${GEDIT_THEME_FILE}"

            xmlstarlet ed --inplace --update "/style-scheme/@id"          --value "${FULL_COLOR_THEME_NAME}"      "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/@_name"       --value "GCS ${COLOR_THEME_NAME} theme" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/author"       --value "GCS - Global Color Scheme"     "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/_description" --value "Theme auto-generated by GCS"   "${GEDIT_THEME_FILE}"

            # global settings
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='text']/@background"         --value "${gedit_bg}"              "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='text']/@foreground"         --value "${gedit_fg}"              "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='selection']/@background"    --value "${gedit_selected_bg}"     "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='selection']/@foreground"    --value "${gedit_selected_fg}"     "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='cursor']/@foreground"       --value "${gedit_fg}"              "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='current-line']/@background" --value "${gedit_current_line_bg}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='line-numbers']/@background" --value "${gedit_line_numbers_bg}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='line-numbers']/@foreground" --value "${gedit_line_numbers_fg}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='draw-spaces']/@foreground"  --value "${gedit_draw_spaces}"     "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='right-margin']/@foreground" --value "${gedit_current_line_bg}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='right-margin']/@background" --value "${gedit_fg}"              "${GEDIT_THEME_FILE}"

            # bracket matching
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='bracket-match']/@background"    --value "${gedit_brace_good}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='bracket-mismatch']/@background" --value "${gedit_error}"      "${GEDIT_THEME_FILE}"

            # search matching
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='search-match']/@background" --value "${gedit_marker_search_bg}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='search-match']/@foreground" --value "${gedit_marker_search_fg}" "${GEDIT_THEME_FILE}"

            # comments
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:comment']/@background"             --value ""                 "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:comment']/@foreground"             --value "${gedit_comment}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:shebang']/@background"             --value ""                 "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:shebang']/@foreground"             --value "${gedit_comment}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:doc-comment-element']/@background" --value "${gedit_error}"   "${GEDIT_THEME_FILE}"

            # constants and variables
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:constant']/@foreground"         --value "${gedit_constant}"         "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:string']/@foreground"           --value "${gedit_string}"           "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:special-char']/@background"     --value "${gedit_special_char}"     "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:special-constant']/@background" --value "${gedit_special_constant}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:number']/@foreground"           --value "${gedit_number}"           "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:floating-point']/@foreground"   --value "${gedit_floating_point}"   "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:keyword']/@foreground"          --value "${gedit_keyword}"          "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:builtin']/@foreground"          --value "${gedit_builtin}"          "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:variable']/@foreground"         --value "${gedit_variable}"         "${GEDIT_THEME_FILE}"

            # identifiers
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:identifier']/@foreground" --value "${gedit_identifier}" "${GEDIT_THEME_FILE}"

            # statements
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:statement']/@foreground" --value "${gedit_statement}" "${GEDIT_THEME_FILE}"

            # types
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:type']/@foreground" --value "${gedit_type}" "${GEDIT_THEME_FILE}"

            # others
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:error']/@foreground"                  --value "${gedit_error}"        "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:warning']/@foreground"                --value "${gedit_warning}"      "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:note']/@foreground"                   --value "${gedit_note}"         "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:net-address-in-comment']/@foreground" --value "${gedit_comment}"      "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:preprocessor']/@foreground"           --value "${gedit_preprocessor}" "${GEDIT_THEME_FILE}"

            # Unknown?
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:specials']/@foreground" --value "${gedit_specials}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='def:boolean']/@foreground"  --value "${gedit_boolean}"  "${GEDIT_THEME_FILE}"

            # C styles
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='c:preprocessor']/@foreground"   --value "${gedit_preprocessor}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='c:included-file']/@foreground"  --value "${gedit_preprocessor}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='c:common-defines']/@foreground" --value "${gedit_type}"         "${GEDIT_THEME_FILE}"

            # diff styles
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='diff:ignore']/@foreground"       --value "${gedit_fg}"                "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='diff:added-line']/@foreground"   --value "${gedit_diff_added}"        "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='diff:removed-line']/@foreground" --value "${gedit_diff_removed}"      "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='diff:changed-line']/@foreground" --value "${gedit_diff_changed}"      "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='diff:diff-file']/@foreground"    --value "${gedit_diff_file}"         "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='diff:location']/@foreground"     --value "${gedit_diff_location}"     "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='diff:special-case']/@foreground" --value "${gedit_diff_special_case}" "${GEDIT_THEME_FILE}"

            # ruby styles
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='ruby:module-handler']/@foreground" --value "${gedit_ruby_module_handler}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='ruby:symbol']/@foreground"         --value "${gedit_ruby_symbol}"         "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='ruby:regex']/@foreground"          --value "${gedit_ruby_regex}"          "${GEDIT_THEME_FILE}"

            # SH styles
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='sh:function']/@foreground" --value "${gedit_sh_function}" "${GEDIT_THEME_FILE}"

            # XML styles
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='xml:attribute-name']/@foreground" --value "${gedit_xml_attribute_name}" "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='xml:element-name']/@foreground"   --value "${gedit_xml_element_name}"   "${GEDIT_THEME_FILE}"
            xmlstarlet ed --inplace --update "/style-scheme/style[@name='xml:entity']/@foreground"         --value "${gedit_xml_entity}"         "${GEDIT_THEME_FILE}"

            gsettings set "${GEDIT_GSETTINGS_PATH}" scheme "${FULL_COLOR_THEME_NAME}"
            printf " done.\n" 
        else
            printf " error: template file \"${GEDIT_TEMPLATE_FILE}\" not found!\n"
        fi

    fi
}

