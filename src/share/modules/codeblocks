#!/bin/bash
# TODO: set bold font on some styles

function init_module() {
    CB_STYLE_CTR=0
    CB_PREFIX="/CodeBlocksConfig/editor/colour_sets"
    CB_COLORSET_NAME="$(echo ${FULL_COLOR_THEME_NAME} | tr - _)"
    CB_COLORSET_PREFIX="${CB_PREFIX}/${CB_COLORSET_NAME}"

    CODEBLOCKS_ENABLE_DEFAULT="true"
    CODEBLOCKS_CONFIG_FILE_DEFAULT="${HOME}/.config/codeblocks/default.conf"

    CODEBLOCKS_ENABLE="$(crudini      --get ${GCS_CONFIG_FILE} codeblocks enable      2>/dev/null || echo "${CODEBLOCKS_ENABLE_DEFAULT}")"
    CODEBLOCKS_CONFIG_FILE="$(crudini --get ${GCS_CONFIG_FILE} codeblocks config_file 2>/dev/null || echo "${CODEBLOCKS_CONFIG_FILE_DEFAULT}")"

    GCS_SYNTAX_FALLBACK_DEFAULT="true"
    GCS_SYNTAX_FALLBACK="$(crudini        --get ${GCS_CONFIG_FILE} gcs        syntax_fallback 2>/dev/null || echo "${GCS_SYNTAX_FALLBACK_DEFAULT}")"
    CODEBLOCKS_SYNTAX_FALLBACK="$(crudini --get ${GCS_CONFIG_FILE} codeblocks syntax_fallback 2>/dev/null || echo "${GCS_SYNTAX_FALLBACK}")"
}



function check_dependencies() {
    if ! which -s codeblocks; then
        return 1

    elif ! [ "${CODEBLOCKS_ENABLE}" == "true" ]; then
        printf "* Ignoring Code::Blocks (disabled from configuration).\n"
        return 1

    elif ! [ -f "${CODEBLOCKS_CONFIG_FILE}" ]; then
        printf "* Ignoring Code::Blocks (configuration file \"${CODEBLOCKS_CONFIG_FILE}\" not found).\n"
        return 1

    else
        return 0

    fi
}



function derive_colors() {
    : ${codeblocks_c_default_fg:=${editor_fg}}
    : ${codeblocks_c_default_bg:=${editor_bg}}
    : ${codeblocks_c_selected_fg:=${editor_selected_fg}}
    : ${codeblocks_c_selected_bg:=${editor_selected_bg}}
    : ${codeblocks_c_number:=${editor_number}}
    : ${codeblocks_c_class:=${editor_class}}
    : ${codeblocks_c_string:=${editor_string}}
    : ${codeblocks_c_operator:=${editor_operator}}
    : ${codeblocks_c_comment:=${editor_comment}}
    : ${codeblocks_c_comment_line:=${editor_comment}}
    : ${codeblocks_c_comment_doc:=${editor_comment}}
    : ${codeblocks_c_comment_line_doc:=${editor_comment}}
    : ${codeblocks_c_comment_keyword_doc:=${editor_preprocessor}}
    : ${codeblocks_c_comment_keyword_error_doc:=${editor_error}}
    : ${codeblocks_c_keyword:=${editor_keyword}}
    : ${codeblocks_c_character:=${editor_character}}
    : ${codeblocks_c_preprocessor:=${editor_preprocessor}}
    : ${codeblocks_c_brace_good_fg:=${editor_brace_good}}
    : ${codeblocks_c_brace_good_bg:=${editor_bg}}
    : ${codeblocks_c_current_line:=${editor_current_line_bg}}

    : ${codeblocks_diff_default_fg:=${editor_fg}}
    : ${codeblocks_diff_default_bg:=${editor_bg}}
    : ${codeblocks_diff_comment:=${editor_comment}}
    : ${codeblocks_diff_command:=${editor_keyword}}
    : ${codeblocks_diff_header:=${editor_preprocessor}}
    : ${codeblocks_diff_position:=${editor_number}}
    : ${codeblocks_diff_deleted:=${editor_diff_removed}}
    : ${codeblocks_diff_added:=${editor_diff_added}}

    : ${codeblocks_active_caption_colour:=${titlebar_focused_bg_color}}
    : ${codeblocks_active_caption_gradient_colour:=${titlebar_focused_bg_color}}
    : ${codeblocks_active_caption_text_colour:=${titlebar_focused_fg_color}}
    : ${codeblocks_inactive_caption_colour:=${titlebar_unfocused_bg_color}}
    : ${codeblocks_inactive_caption_gradient_colour:=${titlebar_unfocused_bg_color}}
    : ${codeblocks_inactive_caption_text_colour:=${titlebar_unfocused_fg_color}}
    : ${codeblocks_project_tree_non_source_files:=${editor_comment}}

    : ${codeblocks_editor_margin_chrome:=${editor_frame_bg}}
    : ${codeblocks_editor_margin_chrome_highlight:=${editor_frame_bg}}
    : ${codeblocks_editor_linenumbers_bg:=${editor_frame_bg}}
    : ${codeblocks_editor_linenumbers_fg:=${editor_frame_fg}}
    : ${codeblocks_editor_gutter:=${editor_long_line_marker}}
    : ${codeblocks_editor_caret:=${editor_fg}}
}



function create_backup() {
    gcs_backup_file "Code::Blocks" "codeblocks" "${CODEBLOCKS_CONFIG_FILE}"
}



function restore_backup() {
    gcs_restore_file "Code::Blocks" "codeblocks" "${CODEBLOCKS_CONFIG_FILE}"
}



function dry_run() {
    printf "* Code::Blocks: create new syntax highlighting scheme in \"${CODEBLOCKS_CONFIG_FILE}\" and set it as default.\n"
}



function print_module_help() {
    echo "Help for GCS ${BASH_SOURCE##*/} module"
    echo
    echo "This module sets syntax highlighting and other colors for Code::Blocks. This is accomplished by modifiying the configuration file, so it is recommended that Code::Blocks is not running when this module is used."
    echo "Currently, only general purpose colors and C/C++ specific colors are supported."
    echo
    echo "Backup and restore are supported."
    echo
}



function apply_theme() {
    if [ "${editor_syntax_enable}" == "false" ]; then
        if [ "${CODEBLOCKS_SYNTAX_FALLBACK}" == "true" ]; then
            if [ "$(xmlstarlet sel -t -v "${CB_PREFIX}/ACTIVE_COLOUR_SET/str" "${CODEBLOCKS_CONFIG_FILE}")" == "${CB_COLORSET_NAME}" ]; then
                printf "* Setting default colors for Code::Blocks..."
                xmlstarlet ed --inplace --update "${CB_PREFIX}/ACTIVE_COLOUR_SET/str" --value "default" "${CODEBLOCKS_CONFIG_FILE}"
                printf " done.\n"
            fi
        fi
    else
        printf "* Setting colors for Code::Blocks..."

        local CODEBLOCKS_TMP_DIR="${GCS_TMP_DIR}/codeblocks"
        local CODEBLOCKS_TMP_CONFIG_FILE="${CODEBLOCKS_TMP_DIR}/default.conf"
        mkdir "${CODEBLOCKS_TMP_DIR}"
        cp "${CODEBLOCKS_CONFIG_FILE}" "${CODEBLOCKS_TMP_CONFIG_FILE}"

        # clear colorset with same name, if any
        xmlstarlet ed --inplace --delete "${CB_COLORSET_PREFIX}"                                                             "${CODEBLOCKS_TMP_CONFIG_FILE}"

        # create new colorset
        xmlstarlet ed --inplace --subnode "${CB_PREFIX}"                  --type elem -n "${CB_COLORSET_NAME}"               "${CODEBLOCKS_TMP_CONFIG_FILE}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}"         --type elem -n "NAME"                              "${CODEBLOCKS_TMP_CONFIG_FILE}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/NAME"    --type elem -n "str" --value "${CB_COLORSET_NAME}" "${CODEBLOCKS_TMP_CONFIG_FILE}"

        # apply C/C++ syntax highlighting
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}"         --type elem -n "cc"                                "${CODEBLOCKS_TMP_CONFIG_FILE}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/cc"      --type elem -n "NAME"                              "${CODEBLOCKS_TMP_CONFIG_FILE}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/cc/NAME" --type elem -n "str" --value "C/C++"               "${CODEBLOCKS_TMP_CONFIG_FILE}"

        CB_STYLE_CTR=0

        codeblocks_add_style "Default"                               "cc" "${codeblocks_c_default_fg}"               "${codeblocks_c_default_bg}"     "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Selection"                             "cc" "${codeblocks_c_selected_fg}"               "${codeblocks_c_selected_bg}"   "${CODEBLOCKS_TMP_CONFIG_FILE}"

        codeblocks_add_style "Number"                                "cc" "${codeblocks_c_number}"                    "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "User keyword"                          "cc" "${codeblocks_c_class}"                     "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "String"                                "cc" "${codeblocks_c_string}"                    "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Operator"                              "cc" "${codeblocks_c_operator}"                  "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Comment (normal)"                      "cc" "${codeblocks_c_comment}"                   "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Comment line (normal)"                 "cc" "${codeblocks_c_comment_line}"              "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Comment (documentation)"               "cc" "${codeblocks_c_comment_doc}"               "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Comment line (documentation)"          "cc" "${codeblocks_c_comment_line_doc}"          "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Comment keyword (documentation)"       "cc" "${codeblocks_c_comment_keyword_doc}"       "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Comment keyword error (documentation)" "cc" "${codeblocks_c_comment_keyword_error_doc}" "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Keyword"                               "cc" "${codeblocks_c_keyword}"                   "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Character"                             "cc" "${codeblocks_c_character}"                 "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Preprocessor"                          "cc" "${codeblocks_c_preprocessor}"              "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Matching brace highlight"              "cc" "${codeblocks_c_brace_good_fg}"             "${codeblocks_c_brace_good_bg}" "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Active line"                           "cc" "default"                                   "${codeblocks_c_current_line}"  "${CODEBLOCKS_TMP_CONFIG_FILE}"

        # apply diff/patch syntax highlighting
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}"                --type elem -n "diffpatch"                "${CODEBLOCKS_TMP_CONFIG_FILE}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/diffpatch"      --type elem -n "NAME"                     "${CODEBLOCKS_TMP_CONFIG_FILE}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/diffpatch/NAME" --type elem -n "str" --value "Diff/Patch" "${CODEBLOCKS_TMP_CONFIG_FILE}"

        CB_STYLE_CTR=0

        codeblocks_add_style "Default"  "diffpatch" "${codeblocks_diff_default_fg}" "${codeblocks_diff_default_bg}" "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Comment"  "diffpatch" "${codeblocks_diff_comment}"    "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Command"  "diffpatch" "${codeblocks_diff_command}"    "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Header"   "diffpatch" "${codeblocks_diff_header}"     "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Position" "diffpatch" "${codeblocks_diff_position}"   "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Deleted"  "diffpatch" "${codeblocks_diff_deleted}"    "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_add_style "Added"    "diffpatch" "${codeblocks_diff_added}"      "default"                       "${CODEBLOCKS_TMP_CONFIG_FILE}"

        # set new colorset as active
        xmlstarlet ed --inplace --update "${CB_PREFIX}/ACTIVE_COLOUR_SET/str" --value "${CB_COLORSET_NAME}" "${CODEBLOCKS_TMP_CONFIG_FILE}"

        codeblocks_set_color "/CodeBlocksConfig/app/environment/aui/ACTIVE_CAPTION_COLOUR"            "${codeblocks_active_caption_colour}"            "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/app/environment/aui/ACTIVE_CAPTION_GRADIENT_COLOUR"   "${codeblocks_active_caption_gradient_colour}"   "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/app/environment/aui/ACTIVE_CAPTION_TEXT_COLOUR"       "${codeblocks_active_caption_text_colour}"       "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/app/environment/aui/INACTIVE_CAPTION_COLOUR"          "${codeblocks_inactive_caption_colour}"          "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/app/environment/aui/INACTIVE_CAPTION_GRADIENT_COLOUR" "${codeblocks_inactive_caption_gradient_colour}" "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/app/environment/aui/INACTIVE_CAPTION_TEXT_COLOUR"     "${codeblocks_inactive_caption_text_colour}"     "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/app/environment/aui/PROJECT_TREE_NON_SOURCE_FILES"    "${codeblocks_project_tree_non_source_files}"    "${CODEBLOCKS_TMP_CONFIG_FILE}"

        codeblocks_set_color "/CodeBlocksConfig/colours/list/EDITOR_MARGIN_CHROME"           "${codeblocks_editor_margin_chrome}"           "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/colours/list/EDITOR_MARGIN_CHROME_HIGHLIGHT" "${codeblocks_editor_margin_chrome_highlight}" "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/colours/list/EDITOR_LINENUMBERS_BG"          "${codeblocks_editor_linenumbers_bg}"          "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/colours/list/EDITOR_LINENUMBERS_FG"          "${codeblocks_editor_linenumbers_fg}"          "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/colours/list/EDITOR_GUTTER"                  "${codeblocks_editor_gutter}"                  "${CODEBLOCKS_TMP_CONFIG_FILE}"
        codeblocks_set_color "/CodeBlocksConfig/colours/list/EDITOR_CARET"                   "${codeblocks_editor_caret}"                   "${CODEBLOCKS_TMP_CONFIG_FILE}"

        mv "${CODEBLOCKS_TMP_CONFIG_FILE}" "${CODEBLOCKS_CONFIG_FILE}"

        printf " done.\n"

    fi
}



# helper function to set styles in Code::blocks config file
function codeblocks_add_style() {

    if [ "$#" -ne 5 ]; then
        echo "Error: ${FUNCNAME[0]}() requires 5 arguments!"
        exit 2
    fi

    local name="$1"
    local lang="$2"
    local fg_color="$3"
    local bg_color="$4"
    local file="$5"

    xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}"                           --type elem -n "style${CB_STYLE_CTR}"  "${file}"
    xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}"      --type elem -n "NAME"                  "${file}"
    xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}/NAME" --type elem -n "str" --value "${name}" "${file}"

    if [ "${fg_color}" != "default" ]; then
        local fg_red="$(   printf "%d" 0x${fg_color:1:2})"
        local fg_green="$( printf "%d" 0x${fg_color:3:2})"
        local fg_blue="$(  printf "%d" 0x${fg_color:5:2})"
        
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}"             --type elem -n "FORE"                         "${file}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}/FORE"        --type elem -n "colour"                       "${file}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}/FORE/colour" --type attr -n "r"      --value "${fg_red}"   "${file}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}/FORE/colour" --type attr -n "g"      --value "${fg_green}" "${file}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}/FORE/colour" --type attr -n "b"      --value "${fg_blue}"  "${file}"
    fi

    if [ "${bg_color}" != "default" ]; then
    #xmlstarlet ed --inplace --delete "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}/BACK"
    #else
        local bg_red="$(   printf "%d" 0x${bg_color:1:2})"
        local bg_green="$( printf "%d" 0x${bg_color:3:2})"
        local bg_blue="$(  printf "%d" 0x${bg_color:5:2})"
        
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}"             --type elem -n "BACK"                         "${file}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}/BACK"        --type elem -n "colour"                       "${file}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}/BACK/colour" --type attr -n "r"      --value "${bg_red}"   "${file}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}/BACK/colour" --type attr -n "g"      --value "${bg_green}" "${file}"
        xmlstarlet ed --inplace --subnode "${CB_COLORSET_PREFIX}/${lang}/style${CB_STYLE_CTR}/BACK/colour" --type attr -n "b"      --value "${bg_blue}"  "${file}"
    fi

    CB_STYLE_CTR="$(expr ${CB_STYLE_CTR} + 1)"
}



# helper function to set colors outside colorsets
function codeblocks_set_color (){

    if [ "$#" -ne 3 ]; then
        echo "Error: ${FUNCNAME[0]}() requires 3 arguments!"
        exit 2
    fi

    local path="$1"
    local color="$2"
    local file="$3"

    local red="$(   printf "%d" 0x${color:1:2})"
    local green="$( printf "%d" 0x${color:3:2})"
    local blue="$(  printf "%d" 0x${color:5:2})"

    xmlstarlet ed --inplace --update "${path}/colour/@r" --value "${red}"   "${file}"
    xmlstarlet ed --inplace --update "${path}/colour/@g" --value "${green}" "${file}"
    xmlstarlet ed --inplace --update "${path}/colour/@b" --value "${blue}"  "${file}"
}

